# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.increment-git-tag.outputs.git-tag }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run the app
      run: |
        python app.py &
        sleep 5  # Give the app time to start

    - name: Verify the app
      run: | 
        curl -f http://127.0.0.1:5000
        pkill -f "python app.py" || true  # Kill the Flask app process if running

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        bash ./build/git_update.sh -v patch

    - name: Build and Test the Docker Image
      id: test-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: development/entrytracker
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        # Build the Docker compose
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
        docker image ls
        export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        export ECR_REPOSITORY=development/entrytracker
        export IMAGE_TAG=$IMAGE_TAG
        docker-compose up -d
        echo "Waiting for the application to initialize..."
        sleep 20
      
        # Verify application is running
        curl -f http://localhost || exit 1

    - name: Push the Image to ECR
      if: success() # Only push the image if all previous steps succeeded
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: development/entrytracker
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Create SSH Key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > web-server.pem
        chmod 600 web-server.pem


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: SSH into EC2 and Deploy
      run: |
        ssh -i web-server.pem -o StrictHostKeyChecking=no ubuntu@ec2-13-234-122-242.ap-south-1.compute.amazonaws.com << EOF
          set -e
          echo "Running deployment script on EC2 instance..."
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export ECR_REPOSITORY=development/entrytracker
          export IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          /home/ubuntu/entrytrcker-cicd/deploy.sh
        EOF

    - name: Validate Deployment
      if: success()
      run: |
        echo "Validating application availability..."
        curl -f http://ec2-13-234-122-242.ap-south-1.compute.amazonaws.com || exit 1